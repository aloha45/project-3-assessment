{"version":3,"sources":["Components/CircleSelector/CircleSelector.jsx","Components/Circles/Circles.jsx","Components/Pictures/Pictures.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","className","circleNumber","map","circle","idx","key","circleIdx","onClick","handleSelect","Circles","Pictures","state","pictures","0","1","2","3","alt","src","this","Component","App","selectIdx","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAiBeA,G,YAdQ,SAACC,GACpB,OACG,yBAAKC,UAAU,kBACbD,EAAME,aAAaC,KAAI,SAACC,EAAQC,GAAT,OACxB,4BACAC,IAAKD,EACLJ,UAAWD,EAAMO,YAAcF,EAAM,WAAa,GAClDG,QAAS,kBAAMR,EAAMS,aAAaJ,KAC7BL,EAAMO,YAAcF,EAApB,iBAAmCA,EAAI,EAAvC,qCAAuEA,EAAI,UCMzEK,G,MAdC,SAACV,GACb,OACG,yBAAKC,UAAU,WACbD,EAAME,aAAaC,KAAI,SAACC,EAAQC,GAAT,OACxB,yBACAC,IAAKD,EACLJ,UAAWD,EAAMO,YAAcF,EAAM,WAAa,GAClDG,QAAS,kBAAMR,EAAMS,aAAaJ,KAC7BA,EAAI,SCWFM,G,kNAlBXC,MAAQ,CACJC,SAAU,CACVC,EAAG,8GACHC,EAAG,mHACHC,EAAG,kHACHC,EAAG,mH,uDAIH,OACI,6BACI,yBAAKC,IAAI,kBAAkBC,IAAKC,KAAKR,MAAMC,SAASO,KAAKpB,MAAMO,aAC/D,iE,GAbOc,cCGjBnB,EAAe,CAAC,IAAK,IAAK,IAAK,KAgCtBoB,E,4MA7BbV,MAAQ,CACNL,UAAW,G,EAGbE,aAAe,SAACc,GACd,EAAKC,SAAS,CAACjB,UAAYgB,K,uDAG3B,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACAM,UAAWa,KAAKR,MAAML,UACtBL,aAAcA,IACd,kBAAC,EAAD,CACAK,UAAWa,KAAKR,MAAML,UACtBL,aAAcA,EACdO,aAAcW,KAAKX,eACnB,kBAAC,EAAD,CACAF,UAAWa,KAAKR,MAAML,UACtBL,aAAcA,EACdO,aAAcW,KAAKX,qB,GAvBXY,aCIEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3800afe1.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => {\n    return ( \n       <div className=\"CircleSelector\">\n        {props.circleNumber.map((circle, idx) =>\n        <button \n        key={idx}\n        className={props.circleIdx === idx ? 'selected' : ''}\n        onClick={() => props.handleSelect(idx)}>\n            {props.circleIdx === idx? `Circle ${idx+1} Selected` : `Select Circle ${idx+1}`}\n        </button>)}\n       </div>\n     );\n}\n \nexport default CircleSelector;","import React from 'react'\nimport './Circles.css'\n\nconst Circles = (props) => {\n    return ( \n       <div className=\"Circles\">\n        {props.circleNumber.map((circle, idx) =>\n        <div \n        key={idx}\n        className={props.circleIdx === idx ? 'selected' : ''}\n        onClick={() => props.handleSelect(idx)}>\n            {idx+1}\n        </div>)}\n       </div>\n     );\n}\n \nexport default Circles;","import React, { Component } from 'react'\nimport './Pictures.css'\n\nclass Pictures extends Component {\n    state = { \n        pictures: {\n        0: \"https://vignette.wikia.nocookie.net/survivor/images/d/dc/S40_Yul_Kwon.jpg/revision/latest?cb=20200115164424\",\n        1: \"https://vignette.wikia.nocookie.net/survivor/images/0/04/S40_Sophie_Clarke.jpg/revision/latest?cb=20200115164420\",\n        2: \"https://vignette.wikia.nocookie.net/survivor/images/8/86/S38_Aubry_Bracco.jpg/revision/latest?cb=20200527182840\",\n        3: \"https://vignette.wikia.nocookie.net/survivor/images/b/b2/S40_Nick_Wilson.jpg/revision/latest?cb=20200115164414\"\n        }\n     }\n    render() { \n        return ( \n            <div>\n                <img alt='survivor circle' src={this.state.pictures[this.props.circleIdx]} />\n                <h6>My Favorite Survivor Winners</h6>\n            </div>\n         );\n    }\n}\n \nexport default Pictures;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './Components/CircleSelector/CircleSelector';\nimport Circles from './Components/Circles/Circles'\nimport Pictures from './Components/Pictures/Pictures';\n\nconst circleNumber = ['0', '1', '2', '3']\n\nclass App extends Component {\n  state = {\n    circleIdx: 0\n  }\n\n  handleSelect = (selectIdx) => {\n    this.setState({circleIdx : selectIdx})\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <Pictures\n          circleIdx={this.state.circleIdx}\n          circleNumber={circleNumber} />\n          <CircleSelector \n          circleIdx={this.state.circleIdx}\n          circleNumber={circleNumber} \n          handleSelect={this.handleSelect}/>\n          <Circles \n          circleIdx={this.state.circleIdx}\n          circleNumber={circleNumber}\n          handleSelect={this.handleSelect} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}